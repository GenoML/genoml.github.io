(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{110:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),u=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,b=d["".concat(r,".").concat(m)]||d[m]||p[m]||o;return t?i.a.createElement(b,s(s({ref:n},c),{},{components:t})):i.a.createElement(b,s({ref:n},c))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(3),i=t(7),o=(t(0),t(110)),r={last_modified_on:"2020-12-18",id:"munging",title:"Data munging"},s={unversionedId:"guides/munging",id:"guides/munging",isDocsHomePage:!1,title:"Data munging",description:"Munging with GenoML will, at a minimum, do the following:",source:"@site/docs/guides/munging.md",slug:"/guides/munging",permalink:"/docs/guides/munging",editUrl:"https://github.com/genoml/genoml.github.io/edit/main/docs/guides/munging.md",version:"current",sidebar:"docs",previous:{title:"Input data",permalink:"/docs/guides/input"},next:{title:"Data harmonization",permalink:"/docs/guides/harmonization"}},l=[],c={toc:l};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Munging with GenoML will, at a minimum, do the following: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Prune your genotypes using PLINK v1.9 (if ",Object(o.b)("inlineCode",{parentName:"li"},"--geno")," flag is used)"),Object(o.b)("li",{parentName:"ul"},"Impute per column using median or mean (can be changed with the ",Object(o.b)("inlineCode",{parentName:"li"},"--impute")," flag)"),Object(o.b)("li",{parentName:"ul"},"Z-scaling of features and removing columns with an std dev = 0 ")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Required")," arguments for GenoML munging are ",Object(o.b)("inlineCode",{parentName:"p"},"--prefix")," and ",Object(o.b)("inlineCode",{parentName:"p"},"--pheno")," "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"data")," : Is the data ",Object(o.b)("inlineCode",{parentName:"li"},"continuous")," or ",Object(o.b)("inlineCode",{parentName:"li"},"discrete"),"?"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"method"),": Do you want to use ",Object(o.b)("inlineCode",{parentName:"li"},"supervised")," or ",Object(o.b)("inlineCode",{parentName:"li"},"unsupervised")," machine learning? ",Object(o.b)("em",{parentName:"li"},"(unsupervised currently under development)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"mode"),":  would you like to ",Object(o.b)("inlineCode",{parentName:"li"},"munge"),", ",Object(o.b)("inlineCode",{parentName:"li"},"train"),", ",Object(o.b)("inlineCode",{parentName:"li"},"tune"),", or ",Object(o.b)("inlineCode",{parentName:"li"},"test")," your model?"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--prefix")," : Where would you like your outputs to be saved?"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--pheno")," : Where is your phenotype file? This file only has two columns, ID in one, and PHENO in the other (0 for controls and 1 for cases)")),Object(o.b)("p",null,"Be sure to have your files formatted the same as the examples, key points being: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"0=controls and 1=case")," in your phenotype file"),Object(o.b)("li",{parentName:"ul"},"Your phenotype file consisting ",Object(o.b)("strong",{parentName:"li"},"only"),' of the "ID" and "PHENO" columns'),Object(o.b)("li",{parentName:"ul"},"Your sample IDs matching across all files"),Object(o.b)("li",{parentName:"ul"},"Your sample IDs not consisting of only integers (add a prefix or suffix to all sample IDs ensuring they are alphanumeric if this is the case before running GenoML)"),Object(o.b)("li",{parentName:"ul"},"Please avoid the use of characters like commas, semi-colons, etc. in the column headers (it is Python after all!)  ")),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The following examples are for discrete data, but if you substitute the following commands with ",Object(o.b)("inlineCode",{parentName:"p"},"continuous")," instead of discrete, you can preprocess your continuous data!"))),Object(o.b)("p",null,"If you would like to munge just with genotypes (in PLINK binary format), the most straightforward command is the following: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files and a phenotype file \n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv\n")),Object(o.b)("p",null,"You can choose to skip pruning your SNPs at this stage by changing the ",Object(o.b)("inlineCode",{parentName:"p"},"--skip_prune"),' flag to "yes" (default is "no")'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files and a phenotype file \n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--skip_prune yes \\\n--pheno examples/discrete/training_pheno.csv\n")),Object(o.b)("p",null,"You can choose to impute on ",Object(o.b)("inlineCode",{parentName:"p"},"mean")," or ",Object(o.b)("inlineCode",{parentName:"p"},"median")," by modifying the ",Object(o.b)("inlineCode",{parentName:"p"},"--impute")," flag, like so ",Object(o.b)("em",{parentName:"p"},"(default is median)"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files and a phenotype file and specifying impute\n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv \\\n--impute mean\n")),Object(o.b)("p",null,"If you suspect collinear variables and think this will be a problem for training the model moving forward, you can use ",Object(o.b)("a",{parentName:"p",href:"https://www.investopedia.com/terms/v/variance-inflation-factor.asp"},"variance inflation factor")," (VIF) filtering: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files and a phenotype file while using VIF to remove multicollinearity \n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv \\\n--vif 5 \\\n--iter 1\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"--vif")," flag specifies the VIF threshold you would like to use (5 is recommended) "),Object(o.b)("li",{parentName:"ul"},"The number of iterations you'd like to run can be modified with the ",Object(o.b)("inlineCode",{parentName:"li"},"--iter")," flag (if you have or anticipate many collinear variables, it's a good idea to increase the iterations)")),Object(o.b)("p",null,"Well, what if you had GWAS summary statistics handy, and would like to use the same SNPs outlined in that file? You can do so by running the following:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files, a phenotype file, and a GWAS summary statistics file \n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv \\\n--gwas examples/discrete/example_GWAS.csv\n")),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"When using the GWAS flag, the PLINK binaries will be pruned to include matching SNPs to the GWAS file. "))),Object(o.b)("p",null,"...and if you wanted to add a p-value cut-off..."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files, a phenotype file, and a GWAS summary statistics file with a p-value cut-off \n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv \\\n--gwas examples/discrete/example_GWAS.csv \\\n--p 0.01\n")),Object(o.b)("p",null,"Do you have additional data you would like to incorporate? Perhaps clinical, demographic, or transcriptomics data? If coded and all numerical, these can be added as an ",Object(o.b)("inlineCode",{parentName:"p"},"--addit")," file by doing the following: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files, a phenotype file, and an addit file\n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv \\\n--addit examples/discrete/training_addit.csv\n")),Object(o.b)("p",null,"You also have the option of not using PLINK binary files if you would like to preprocess (and then, later train) on a phenotype and addit file by doing the following:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files, a phenotype file, and an addit file\n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--pheno examples/discrete/training_pheno.csv \\\n--addit examples/discrete/training_addit.csv\n")),Object(o.b)("p",null,"Are you interested in selecting and ranking your features? If so, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"--feature_selection")," flag and specify like so...:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discrete data using PLINK genotype binary files, a phenotype file, and running feature selection \n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv \\\n--addit examples/discrete/training_addit.csv \\\n--feature_selection 50\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"--feature_selection")," flag uses extraTrees (",Object(o.b)("a",{parentName:"p",href:"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesClassifier.html"},"classifier")," for discrete data; ",Object(o.b)("a",{parentName:"p",href:"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesRegressor.html"},"regressor")," for continuous data) to output a ",Object(o.b)("inlineCode",{parentName:"p"},"*.approx_feature_importance.txt")," file with the features most contributing to your model at the top. "),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The following examples are for adjusting your data (if you have principal components or other data you'd like to adjust particular columns with)"))),Object(o.b)("p",null,"Do you have additional covariates and confounders you would like to adjust for in the munging step prior to training your model and/or would like to reduce your data? To adjust, use the ",Object(o.b)("inlineCode",{parentName:"p"},"--adjust_data")," flag with the following necessary flags: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--adjust_normalize"),": Would you like to normalize your final adjusted data? (Default: yes)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--target_features"),": A .txt file, one column, with a list of features to adjust (no header). These should correspond to features in the munged dataset"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--confounders"),": A .csv of confounders to adjust for with ID column and header. Numeric, with no missing data and the ID column is mandatory (this can be PCs, for example)")),Object(o.b)("p",null,"To reduce your data prior to adjusting, use the ",Object(o.b)("inlineCode",{parentName:"p"},"--umap_reduce yes")," flag. This flag will also prompt you for if you want to adjust your data, normalize, and what your target features and confounders might be. We use the ",Object(o.b)("a",{parentName:"p",href:"https://umap-learn.readthedocs.io/en/latest/"},"Uniform Manifold Approximation and Projection for Dimension Reduction")," (UMAP) to reduce your data into 2D, adjust, and exports a plot and an adjusted dataframe moving forward. This can be done by running the following: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# Running GenoML munging on discreate data using PLINK binary files, a phenotype file, using UMAP to reduce dimensions and account for features, and running feature selection\n\ngenoml discrete supervised munge \\\n--prefix outputs/test_discrete_geno \\\n--geno examples/discrete/training \\\n--pheno examples/discrete/training_pheno.csv \\\n--addit examples/discrete/training_addit.csv \\\n--umap_reduce yes \\\n--adjust_data yes \\\n--adjust_normalize yes \\\n--target_features examples/discrete/to_adjust.txt \\\n--confounders examples/discrete/training_addit_confounder_example.csv \\\n--feature_selection 50 \n")),Object(o.b)("p",null,"Here, the ",Object(o.b)("inlineCode",{parentName:"p"},"--confounders")," flag takes in a dataset of features that should be accounted for. This is a .csv file with the ID column and header included and is numeric with no missing data. ",Object(o.b)("strong",{parentName:"p"},"The ID column is mandatory.")," The ",Object(o.b)("inlineCode",{parentName:"p"},"--target_features")," flag takes in a .txt with a list of features (column names) you are adjusting for."),Object(o.b)("a",{id:"2"}))}u.isMDXComponent=!0}}]);